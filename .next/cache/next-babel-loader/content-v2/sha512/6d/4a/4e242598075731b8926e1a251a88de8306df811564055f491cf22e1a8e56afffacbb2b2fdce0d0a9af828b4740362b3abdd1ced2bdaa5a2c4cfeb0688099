{"ast":null,"code":"// import MeetupDetail from \"../../components/meetups/MeetupDetail\";\n// import Head from \"next/head\";\n// import { Fragment } from \"react\";\n// import { useRouter } from \"next/router\";\n// let placeId;\n// let dbId;\n// function MeetupDetails(props) {\n//   router = useRouter();\n//   placeId = router.pathname.slice(1);\n//   dbId = props.meetupData.id;\n//   return (\n//     <Fragment>\n//       <Head>\n//         <title>{props.meetupData.title}</title>\n//       </Head>\n//       <MeetupDetail\n//         image={props.meetupData.image}\n//         title={props.meetupData.title}\n//         address={props.meetupData.address}\n//         description={props.meetupData.description}\n//       />\n//     </Fragment>\n//   );\n// }\n// export function getStaticPaths() {\n//   return {\n//     fallback: false,\n//     paths: [\n//       {\n//         params: {\n//           meetupId: placeId,\n//         },\n//       },\n//     ],\n//   };\n// }\n// export async function getStaticProps(context) {\n//   // fetch\n//   const client = await MongoClient.connect(\n//     \"mongodb+srv://UserNo1:88714659@atlascluster.ra9n7jk.mongodb.net/meetups?retryWrites=true&w=majority\"\n//   );\n//   const db = client.db();\n//   const meetupsCollection = db.collection(\"meetups\");\n//   const data = await meetupsCollection.find().toArray();\n//   client.close();\n//   // const meetupsdata = data\n//   //   .filter((i) => i._id.toString() !== placeId)\n//   //   .map((i) => ({\n//   //     title: i.title,\n//   //     image: i.image,\n//   //     address: i.address,\n//   //     description: i.description,\n//   //     id: i._id.toString(),\n//   //   }));\n//   return {\n//     props: {\n//       meetups: data,\n//     },\n//     revalidate: 1, //? /////// if data changes frequently (we regenerate every 1 sec here)\n//   };\n// }\nexport default MeetupDetails;","map":{"version":3,"sources":["C:/Users/USER-PC/Desktop/17 Next-js/pages/[meetupId]/index.js"],"names":["MeetupDetails"],"mappings":"AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,eAAeA,aAAf","sourcesContent":["// import MeetupDetail from \"../../components/meetups/MeetupDetail\";\r\n// import Head from \"next/head\";\r\n// import { Fragment } from \"react\";\r\n// import { useRouter } from \"next/router\";\r\n\r\n// let placeId;\r\n// let dbId;\r\n// function MeetupDetails(props) {\r\n//   router = useRouter();\r\n//   placeId = router.pathname.slice(1);\r\n//   dbId = props.meetupData.id;\r\n//   return (\r\n//     <Fragment>\r\n//       <Head>\r\n//         <title>{props.meetupData.title}</title>\r\n//       </Head>\r\n//       <MeetupDetail\r\n//         image={props.meetupData.image}\r\n//         title={props.meetupData.title}\r\n//         address={props.meetupData.address}\r\n//         description={props.meetupData.description}\r\n//       />\r\n//     </Fragment>\r\n//   );\r\n// }\r\n\r\n// export function getStaticPaths() {\r\n//   return {\r\n//     fallback: false,\r\n//     paths: [\r\n//       {\r\n//         params: {\r\n//           meetupId: placeId,\r\n//         },\r\n//       },\r\n//     ],\r\n//   };\r\n// }\r\n\r\n// export async function getStaticProps(context) {\r\n//   // fetch\r\n//   const client = await MongoClient.connect(\r\n//     \"mongodb+srv://UserNo1:88714659@atlascluster.ra9n7jk.mongodb.net/meetups?retryWrites=true&w=majority\"\r\n//   );\r\n//   const db = client.db();\r\n\r\n//   const meetupsCollection = db.collection(\"meetups\");\r\n\r\n//   const data = await meetupsCollection.find().toArray();\r\n\r\n//   client.close();\r\n\r\n//   // const meetupsdata = data\r\n//   //   .filter((i) => i._id.toString() !== placeId)\r\n//   //   .map((i) => ({\r\n//   //     title: i.title,\r\n//   //     image: i.image,\r\n//   //     address: i.address,\r\n//   //     description: i.description,\r\n//   //     id: i._id.toString(),\r\n//   //   }));\r\n//   return {\r\n//     props: {\r\n//       meetups: data,\r\n//     },\r\n//     revalidate: 1, //? /////// if data changes frequently (we regenerate every 1 sec here)\r\n//   };\r\n// }\r\n\r\nexport default MeetupDetails;\r\n"]},"metadata":{},"sourceType":"module"}